{
    "id": "02572ee8-ad56-4738-bed8-63fa41d9f1e0",
    "name": "JFrogGradle",
    "friendlyName": "JFrog Gradle",
    "description": "Build with Gradle, while resolving dependencies and deploying artifacts from and to Artifactory and while allowing to collect build-info. The collected build-info can be later published to Artifactory by the \"JFrog Publish Build Info\" task.",
    "author": "JFrog",
    "helpMarkDown": "[More Information](https://www.jfrog.com/confluence/display/JFROG/JFrog+Azure+DevOps+Extension#JFrogAzureDevOpsExtension-TriggeringGradleBuilds)",
    "category": "Utility",
    "visibility": [
        "Build",
        "Release"
    ],
    "version": {
        "Major": "1",
        "Minor": "3",
        "Patch": "0"
    },
    "demands": [
        "gradle"
    ],
    "minimumAgentVersion": "1.89.0",
    "instanceNameFormat": "JFrog Gradle",
    "groups": [
        {
            "name": "resolve",
            "displayName": "Resolve dependencies from Artifactory",
            "isExpanded": true
        },
        {
            "name": "deployer",
            "displayName": "Deploy artifacts to Artifactory",
            "isExpanded": true
        }
    ],
    "inputs": [
        {
            "name": "gradleBuildFile",
            "type": "filePath",
            "label": "Gradle build file",
            "defaultValue": "build.gradle",
            "required": true,
            "helpMarkDown": "Relative path to build.gradle file."
        },
        {
            "name": "workDir",
            "type": "filePath",
            "label": "Working directory",
            "required": false,
            "helpMarkDown": "Path to directory of the Gradle project. If not specified, the repository root directory is used. "
        },
        {
            "name": "options",
            "type": "string",
            "label": "Options",
            "required": false
        },
        {
            "name": "tasks",
            "type": "string",
            "label": "Task(s)",
            "defaultValue": "artifactoryPublish",
            "required": true
        },
        {
            "name": "artifactoryResolverService",
            "type": "connectedService:jfrogArtifactoryService",
            "label": "Artifactory service",
            "groupName": "resolve",
            "required": false,
            "helpMarkDown": "Artifactory service for dependencies resolution."
        },
        {
            "name": "sourceRepo",
            "type": "pickList",
            "label": "Resolution repository",
            "groupName": "resolve",
            "required": true,
            "helpMarkDown": "Sets the repository for resolution.",
            "visibleRule": "artifactoryResolverService != \"\"",
            "properties": {
                "EditableOptions": "True"
            }
        },
        {
            "name": "artifactoryDeployerService",
            "type": "connectedService:jfrogArtifactoryService",
            "label": "Artifactory service",
            "defaultValue": "",
            "groupName": "deployer",
            "required": false,
            "helpMarkDown": "Artifactory service for artifacts deployment."
        },
        {
            "name": "targetRepo",
            "type": "pickList",
            "label": "Deployment repository",
            "groupName": "deployer",
            "defaultValue": "",
            "required": true,
            "helpMarkDown": "Sets the repository for deploying artifacts.",
            "visibleRule": "artifactoryDeployerService != \"\"",
            "properties": {
                "EditableOptions": "True"
            }
        },
        {
            "name": "usesPlugin",
            "type": "boolean",
            "label": "Use Artifactory plugin",
            "defaultValue": "false",
            "required": false,
            "helpMarkDown": "Select if the Gradle Artifactory Plugin is already applied in the build script."
        },
        {
            "name": "useWrapper",
            "type": "boolean",
            "label": "Use Gradle wrapper",
            "defaultValue": "false",
            "required": false,
            "helpMarkDown": "Select if you'd like to use the Gradle wrapper."
        },
        {
            "name": "deployMavenDesc",
            "type": "boolean",
            "label": "Deploy Maven descriptors",
            "defaultValue": "true",
            "required": false,
            "helpMarkDown": "When selected, Maven descriptors will be deployed."
        },
        {
            "name": "deployIvyDesc",
            "type": "boolean",
            "label": "Deploy Ivy descriptors",
            "defaultValue": "true",
            "required": false,
            "helpMarkDown": "When selected, Ivy descriptors will be deployed."
        },
        {
            "name": "ivyDescPattern",
            "type": "string",
            "label": "Ivy descriptors pattern",
            "defaultValue": "[organization]/[module]/ivy-[revision].xml",
            "required": false,
            "visibleRule": "deployIvyDesc=true",
            "helpMarkDown": "Set the deployed Ivy descriptor pattern."
        },
        {
            "name": "ivyArtifactsPattern",
            "type": "string",
            "label": "Ivy artifacts pattern",
            "defaultValue": "[organization]/[module]/[revision]/[artifact]-[revision](-[classifier]).[ext]",
            "required": false,
            "visibleRule": "deployIvyDesc=true",
            "helpMarkDown": "Set the deployed Ivy artifacts pattern."
        },
        {
            "name": "collectBuildInfo",
            "type": "boolean",
            "label": "Collect build info",
            "defaultValue": "false",
            "required": false,
            "helpMarkDown": "Select to collect build info and store it locally. The collected build info can be published to Artifactory using the \"JFrog Publish Build Info\" task."
        },
        {
            "name": "buildName",
            "type": "string",
            "label": "Build name",
            "defaultValue": "$(Build.DefinitionName)",
            "required": true,
            "visibleRule": "collectBuildInfo=true",
            "helpMarkDown": "Build name.\nTo use the default build name of the pipeline, set the field to '$(Build.DefinitionName)'.\nThe collected build-info should be published to Artifactory using the 'JFrog Publish Build Info' task."
        },
        {
            "name": "buildNumber",
            "type": "string",
            "label": "Build number",
            "defaultValue": "$(Build.BuildNumber)",
            "required": true,
            "visibleRule": "collectBuildInfo=true",
            "helpMarkDown": "Build number.\nTo use the default build number of the pipeline, set the field to '$(Build.BuildNumber)'.\nThe collected build-info should be published to Artifactory using the 'JFrog Publish Build Info' task."
        },
        {
            "name": "projectKey",
            "type": "string",
            "label": "Project key",
            "defaultValue": "",
            "required": false,
            "visibleRule": "collectBuildInfo=true",
            "helpMarkDown": "JFrog project key."
        },
        {
            "name": "includeEnvVars",
            "type": "boolean",
            "label": "Include environment variables",
            "defaultValue": "false",
            "required": false,
            "visibleRule": "collectBuildInfo == true",
            "helpMarkDown": "Select to include environment variables in the published build info."
        }
    ],
    "dataSourceBindings": [
        {
            "endpointId": "$(artifactoryResolverService)",
            "endpointURL": "{{endpoint.url}}/api/repositories",
            "target": "sourceRepo",
            "resultSelector": "jsonpath:$[?(@.type=='VIRTUAL')]",
            "resultTemplate": "{ \"Value\" : \"{{{key}}}\", \"DisplayValue\" : \"{{{key}}}\" }"
        },
        {
            "endpointId": "$(artifactoryDeployerService)",
            "endpointURL": "{{endpoint.url}}/api/repositories",
            "target": "targetRepo",
            "resultSelector": "jsonpath:$[?(@.type=='LOCAL' || @.type=='VIRTUAL')]",
            "resultTemplate": "{ \"Value\" : \"{{{key}}}\", \"DisplayValue\" : \"{{{key}}}\" }"
        }
    ],
    "execution": {
        "Node10": {
            "target": "gradleBuild.js",
            "workingDirectory": "$(currentDirectory)"
        }
    }
}